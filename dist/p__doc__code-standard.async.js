"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[291],{53054:function(e,s,l){l.r(s);var n=l(92126),i=l(2590),r=l(96557),t=l(62237),c=l(31178),d=l(66118),x=l(40658),o=l(1413),h=l(62410),j=l(77797),a=l(1058),p=l(85791),u=l(29090),g=l(33056),m=l(88277),y=l(67365),f=(l(75271),l(52676)),Z=x.Z.Title,v=x.Z.Paragraph,k=x.Z.Text,S=x.Z.Link;s.default=function(){var e=[{title:"工具名称",dataIndex:"tool",key:"tool",render:function(e){return(0,f.jsxs)(o.Z,{children:[(0,f.jsx)(n.Z,{style:{color:"#1890ff"}}),(0,f.jsx)(k,{strong:!0,children:e})]})}},{title:"功能说明",dataIndex:"purpose",key:"purpose"},{title:"配置文件",dataIndex:"config",key:"config",render:function(e){return(0,f.jsx)(k,{code:!0,style:{fontSize:"12px"},children:e})}},{title:"使用命令",dataIndex:"usage",key:"usage",render:function(e){return(0,f.jsx)(k,{code:!0,style:{fontSize:"12px"},children:e})}},{title:"状态",dataIndex:"status",key:"status",render:function(e){return(0,f.jsx)(h.Z,{color:"active"===e?"green":"default",children:"active"===e?"已启用":"未启用"})}}],s=[{title:"类型",dataIndex:"type",key:"type",render:function(e){return(0,f.jsx)(k,{strong:!0,children:e})}},{title:"命名规则",dataIndex:"rule",key:"rule",render:function(e){return(0,f.jsx)(h.Z,{color:"blue",style:{fontSize:"12px"},children:e})}},{title:"示例",dataIndex:"example",key:"example",render:function(e){return(0,f.jsx)(k,{code:!0,style:{fontSize:"12px"},children:e})}},{title:"说明",dataIndex:"description",key:"description"}],l=[{key:"1",label:"代码规范",children:(0,f.jsxs)("div",{children:[(0,f.jsx)(Z,{level:3,children:"🎯 核心原则"}),(0,f.jsxs)(j.Z,{gutter:[16,16],style:{marginBottom:24},children:[(0,f.jsx)(a.Z,{xs:24,sm:12,md:6,children:(0,f.jsxs)(p.Z,{size:"small",style:{textAlign:"center"},children:[(0,f.jsx)(i.Z,{style:{fontSize:24,color:"#1890ff"}}),(0,f.jsx)("div",{style:{marginTop:8},children:(0,f.jsx)(k,{strong:!0,children:"可读性"})}),(0,f.jsx)(k,{type:"secondary",style:{fontSize:12},children:"代码如文档"})]})}),(0,f.jsx)(a.Z,{xs:24,sm:12,md:6,children:(0,f.jsxs)(p.Z,{size:"small",style:{textAlign:"center"},children:[(0,f.jsx)(r.Z,{style:{fontSize:24,color:"#52c41a"}}),(0,f.jsx)("div",{style:{marginTop:8},children:(0,f.jsx)(k,{strong:!0,children:"一致性"})}),(0,f.jsx)(k,{type:"secondary",style:{fontSize:12},children:"统一风格"})]})}),(0,f.jsx)(a.Z,{xs:24,sm:12,md:6,children:(0,f.jsxs)(p.Z,{size:"small",style:{textAlign:"center"},children:[(0,f.jsx)(t.Z,{style:{fontSize:24,color:"#faad14"}}),(0,f.jsx)("div",{style:{marginTop:8},children:(0,f.jsx)(k,{strong:!0,children:"可维护"})}),(0,f.jsx)(k,{type:"secondary",style:{fontSize:12},children:"易于修改"})]})}),(0,f.jsx)(a.Z,{xs:24,sm:12,md:6,children:(0,f.jsxs)(p.Z,{size:"small",style:{textAlign:"center"},children:[(0,f.jsx)(c.Z,{style:{fontSize:24,color:"#f5222d"}}),(0,f.jsx)("div",{style:{marginTop:8},children:(0,f.jsx)(k,{strong:!0,children:"标准化"})}),(0,f.jsx)(k,{type:"secondary",style:{fontSize:12},children:"遵循规范"})]})})]}),(0,f.jsx)(Z,{level:3,children:"📝 命名规范"}),(0,f.jsx)(u.Z,{dataSource:[{key:"1",type:"文件/文件夹",rule:"kebab-case",example:"user-profile.tsx, api-service/",description:"小写字母，用短横线分隔"},{key:"2",type:"组件名",rule:"kebab-case",example:"user-profile, api-service",description:"小写字母，用短横线分隔"},{key:"3",type:"变量/函数",rule:"camelCase",example:"userName, getUserInfo",description:"小驼峰命名法"},{key:"4",type:"常量",rule:"SCREAMING_SNAKE_CASE",example:"API_BASE_URL, MAX_RETRY_COUNT",description:"全大写，下划线分隔"},{key:"5",type:"接口/类型",rule:"PascalCase + 前缀",example:"UserInfo, ApiResponse",description:"接口，类型别名"},{key:"6",type:"CSS类名",rule:"kebab-case + BEM",example:".user-card__title--active",description:"BEM 方法论命名"}],columns:s,pagination:!1,size:"middle",style:{marginBottom:24}},"type"),(0,f.jsx)(Z,{level:3,children:"📂 目录结构规范"}),(0,f.jsx)(p.Z,{style:{marginBottom:24},children:(0,f.jsx)("pre",{style:{padding:16},children:"src/\n├── components/          # 公共组件\n│   ├── ui/             # UI 基础组件\n│   └── business/       # 业务组件\n├── pages/              # 页面组件\n│   ├── doc/           # 文档页面\n│   ├── ui/            # UI 展示页面\n│   └── [feature]/     # 功能页面\n├── services/           # API 服务\n├── utils/              # 工具函数\n├── hooks/              # 自定义 Hooks\n├── types/              # TypeScript 类型定义\n├── assets/             # 静态资源\n└── styles/             # 全局样式"})}),(0,f.jsx)(Z,{level:3,children:"🔧 代码风格"}),(0,f.jsxs)(j.Z,{gutter:[16,16],children:[(0,f.jsx)(a.Z,{xs:24,lg:12,children:(0,f.jsx)(p.Z,{title:"✅ 推荐写法",size:"small",children:(0,f.jsx)("pre",{style:{padding:12},children:"// 组件定义\ninterface UserProfileProps {\n  userId: string;\n  onEdit?: () => void;\n}\n\nconst UserProfile: React.FC<UserProfileProps> = ({ \n  userId, \n  onEdit \n}) => {\n  // 使用解构赋值\n  const { data, loading } = useUserInfo(userId);\n  \n  // 早期返回\n  if (loading) return <Spin />;\n  if (!data) return <Empty />;\n  \n  return (\n    <Card>\n      <Title level={3}>{data.name}</Title>\n      {onEdit && (\n        <Button onClick={onEdit}>编辑</Button>\n      )}\n    </Card>\n  );\n};"})})}),(0,f.jsx)(a.Z,{xs:24,lg:12,children:(0,f.jsx)(p.Z,{title:"❌ 不推荐写法",size:"small",children:(0,f.jsx)("pre",{style:{padding:12},children:"// 避免的写法\nconst UserProfile = (props) => {\n  // 避免直接使用 props\n  const userData = useUserInfo(props.userId);\n  \n  // 避免嵌套过深\n  if (userData.loading) {\n    return <Spin />;\n  } else {\n    if (userData.data) {\n      return (\n        <Card>\n          <Title level={3}>\n            {userData.data.name}\n          </Title>\n          {props.onEdit ? (\n            <Button onClick={props.onEdit}>\n              编辑\n            </Button>\n          ) : null}\n        </Card>\n      );\n    } else {\n      return <Empty />;\n    }\n  }\n};"})})})]})]})},{key:"2",label:"开发工具",children:(0,f.jsxs)("div",{children:[(0,f.jsx)(Z,{level:3,children:"🛠️ 工具配置一览"}),(0,f.jsx)(u.Z,{dataSource:[{key:"1",tool:"ESLint",purpose:"代码质量检查",config:".eslintrc.js",usage:"max lint --fix --eslint-only",status:"active"},{key:"2",tool:"Prettier",purpose:"代码格式化",config:".prettierrc",usage:"prettier --cache --write .",status:"active"},{key:"3",tool:"StyleLint",purpose:"CSS/Less 样式检查",config:".stylelintrc.js",usage:"max lint --fix --stylelint-only",status:"active"},{key:"4",tool:"Husky",purpose:"Git 钩子管理",config:".husky/",usage:"自动执行 pre-commit 检查",status:"active"},{key:"5",tool:"lint-staged",purpose:"暂存文件检查",config:".lintstagedrc",usage:"配合 Husky 使用",status:"active"},{key:"6",tool:"TypeScript",purpose:"类型检查",config:"tsconfig.json",usage:"tsc --noEmit",status:"active"}],columns:e,pagination:!1,size:"middle",style:{marginBottom:24}},"tool"),(0,f.jsxs)(j.Z,{gutter:[16,16],children:[(0,f.jsx)(a.Z,{xs:24,lg:12,children:(0,f.jsxs)(p.Z,{title:"ESLint 配置",size:"small",children:[(0,f.jsx)(v,{children:"ESLint 用于代码质量检查，已集成 Umi Max 官方规则。"}),(0,f.jsx)(Z,{level:5,children:"配置文件：.eslintrc.js"}),(0,f.jsx)("pre",{style:{padding:12},children:"module.exports = {\n  extends: require.resolve('@umijs/max/eslint'),\n};"}),(0,f.jsx)(Z,{level:5,children:"常用命令"}),(0,f.jsxs)("ul",{children:[(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"max lint"})," - 检查所有文件"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"max lint --fix"})," - 自动修复问题"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"max lint --eslint-only"})," - 仅 ESLint 检查"]})]})]})}),(0,f.jsx)(a.Z,{xs:24,lg:12,children:(0,f.jsxs)(p.Z,{title:"Prettier 配置",size:"small",children:[(0,f.jsx)(v,{children:"Prettier 用于代码格式化，保证代码风格一致。"}),(0,f.jsx)(Z,{level:5,children:"配置文件：.prettierrc"}),(0,f.jsx)("pre",{style:{padding:12},children:'{\n  "printWidth": 80,\n  "singleQuote": true,\n  "trailingComma": "all",\n  "proseWrap": "never",\n  "plugins": [\n    "prettier-plugin-organize-imports",\n    "prettier-plugin-packagejson"\n  ]\n}'}),(0,f.jsx)(Z,{level:5,children:"常用命令"}),(0,f.jsxs)("ul",{children:[(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"pnpm prettier --write . 或者 pnpm run format"})," - 格式化所有文件"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"pnpm prettier --check ."})," - 检查格式"]})]})]})}),(0,f.jsx)(a.Z,{xs:24,lg:12,children:(0,f.jsxs)(p.Z,{title:"Husky + lint-staged",size:"small",children:[(0,f.jsx)(v,{children:"Git 钩子管理，在提交前自动执行代码检查和格式化。"}),(0,f.jsx)(Z,{level:5,children:"配置文件：.lintstagedrc"}),(0,f.jsx)("pre",{style:{padding:12},children:'{\n  "*.{md,json}": ["prettier --cache --write"],\n  "*.{js,jsx}": [\n    "max lint --fix --eslint-only",\n    "prettier --cache --write"\n  ],\n  "*.ts?(x)": [\n    "max lint --fix --eslint-only", \n    "prettier --cache --parser=typescript --write"\n  ]\n}'}),(0,f.jsx)(Z,{level:5,children:"工作流程"}),(0,f.jsxs)("ul",{children:[(0,f.jsxs)("li",{children:["执行 ",(0,f.jsx)(k,{code:!0,children:"git commit"})]}),(0,f.jsx)("li",{children:"触发 pre-commit 钩子"}),(0,f.jsx)("li",{children:"对暂存文件执行检查和格式化"}),(0,f.jsx)("li",{children:"检查通过后完成提交"})]})]})}),(0,f.jsx)(a.Z,{xs:24,lg:12,children:(0,f.jsxs)(p.Z,{title:"TypeScript 配置",size:"small",children:[(0,f.jsx)(v,{children:"TypeScript 提供类型检查，提高代码质量和开发体验。"}),(0,f.jsx)(Z,{level:5,children:"配置文件：tsconfig.json"}),(0,f.jsx)("pre",{style:{padding:12},children:'{\n  "extends": "@umijs/max/typings/config"\n}'}),(0,f.jsx)(Z,{level:5,children:"类型定义"}),(0,f.jsxs)("ul",{children:[(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"typings.d.ts"})," - 全局类型声明"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"src/types/"})," - 业务类型定义"]}),(0,f.jsx)("li",{children:"使用接口定义 Props 和 State"}),(0,f.jsx)("li",{children:"为 API 响应定义类型"})]})]})})]})]})},{key:"3",label:"最佳实践",children:(0,f.jsxs)("div",{children:[(0,f.jsx)(Z,{level:3,children:"🚀 开发流程"}),(0,f.jsx)(p.Z,{style:{marginBottom:24},children:(0,f.jsxs)(j.Z,{gutter:[16,16],children:[(0,f.jsx)(a.Z,{xs:24,md:8,children:(0,f.jsxs)(p.Z,{size:"small",style:{textAlign:"center"},children:[(0,f.jsx)("div",{style:{fontSize:32,marginBottom:8},children:"1️⃣"}),(0,f.jsx)(Z,{level:4,children:"创建分支"}),(0,f.jsx)(k,{code:!0,children:"git checkout -b feature/xxx"})]})}),(0,f.jsx)(a.Z,{xs:24,md:8,children:(0,f.jsxs)(p.Z,{size:"small",style:{textAlign:"center"},children:[(0,f.jsx)("div",{style:{fontSize:32,marginBottom:8},children:"2️⃣"}),(0,f.jsx)(Z,{level:4,children:"开发功能"}),(0,f.jsx)(k,{children:"遵循编码规范开发"})]})}),(0,f.jsx)(a.Z,{xs:24,md:8,children:(0,f.jsxs)(p.Z,{size:"small",style:{textAlign:"center"},children:[(0,f.jsx)("div",{style:{fontSize:32,marginBottom:8},children:"3️⃣"}),(0,f.jsx)(Z,{level:4,children:"提交代码"}),(0,f.jsx)(k,{children:"自动执行检查和格式化"})]})})]})}),(0,f.jsx)(Z,{level:3,children:"📋 代码审查清单"}),(0,f.jsxs)(j.Z,{gutter:[16,16],children:[(0,f.jsx)(a.Z,{xs:24,lg:12,children:(0,f.jsx)(p.Z,{title:"功能性检查",size:"small",children:(0,f.jsxs)("ul",{children:[(0,f.jsxs)("li",{children:[(0,f.jsx)(d.Z,{style:{color:"#52c41a"}})," 功能是否符合需求"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(d.Z,{style:{color:"#52c41a"}})," 边界条件处理"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(d.Z,{style:{color:"#52c41a"}})," 错误处理机制"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(d.Z,{style:{color:"#52c41a"}})," 性能优化考虑"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(d.Z,{style:{color:"#52c41a"}})," 用户体验友好"]})]})})}),(0,f.jsx)(a.Z,{xs:24,lg:12,children:(0,f.jsx)(p.Z,{title:"代码质量检查",size:"small",children:(0,f.jsxs)("ul",{children:[(0,f.jsxs)("li",{children:[(0,f.jsx)(d.Z,{style:{color:"#52c41a"}})," 命名是否清晰"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(d.Z,{style:{color:"#52c41a"}})," 代码是否简洁"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(d.Z,{style:{color:"#52c41a"}})," 注释是否充分"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(d.Z,{style:{color:"#52c41a"}})," 类型定义完整"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(d.Z,{style:{color:"#52c41a"}})," 无冗余代码"]})]})})})]}),(0,f.jsx)(Z,{level:3,children:"⚡ 开发技巧"}),(0,f.jsxs)(j.Z,{gutter:[16,16],children:[(0,f.jsx)(a.Z,{xs:24,lg:8,children:(0,f.jsx)(p.Z,{title:"组件开发",size:"small",children:(0,f.jsxs)("ul",{children:[(0,f.jsx)("li",{children:"单一职责原则"}),(0,f.jsx)("li",{children:"合理使用 Props 和 State"}),(0,f.jsx)("li",{children:"善用 React Hooks"}),(0,f.jsx)("li",{children:"组件解耦和复用"}),(0,f.jsx)("li",{children:"性能优化（memo、useMemo）"})]})})}),(0,f.jsx)(a.Z,{xs:24,lg:8,children:(0,f.jsx)(p.Z,{title:"样式管理",size:"small",children:(0,f.jsxs)("ul",{children:[(0,f.jsx)("li",{children:"使用 CSS Modules 或 styled-components"}),(0,f.jsx)("li",{children:"遵循 BEM 命名规范"}),(0,f.jsx)("li",{children:"响应式设计"}),(0,f.jsx)("li",{children:"主题色和设计规范"}),(0,f.jsx)("li",{children:"避免内联样式"})]})})}),(0,f.jsx)(a.Z,{xs:24,lg:8,children:(0,f.jsx)(p.Z,{title:"状态管理",size:"small",children:(0,f.jsxs)("ul",{children:[(0,f.jsx)("li",{children:"合理选择状态管理方案"}),(0,f.jsx)("li",{children:"本地状态 vs 全局状态"}),(0,f.jsx)("li",{children:"使用 Umi 的数据流"}),(0,f.jsx)("li",{children:"API 数据管理"}),(0,f.jsx)("li",{children:"状态持久化"})]})})})]})]})},{key:"4",label:"项目配置",children:(0,f.jsxs)("div",{children:[(0,f.jsx)(Z,{level:3,children:"⚙️ Umi Max 配置"}),(0,f.jsx)(p.Z,{title:"核心配置：config/config.ts",style:{marginBottom:24},children:(0,f.jsx)("pre",{style:{padding:16},children:"import { defineConfig } from '@umijs/max';\nimport routes from './routes';\n\nexport default defineConfig({\n  // Ant Design 集成\n  antd: {},\n  \n  // 数据流\n  model: {},\n  \n  // 初始状态\n  initialState: {},\n  \n  // 请求配置\n  request: {},\n  \n  // styled-components 支持\n  styledComponents: {},\n  \n  // 国际化配置\n  locale: {\n    default: 'zh-CN',\n    baseNavigator: true,\n    baseSeparator: '-',\n  },\n  \n  // 布局配置\n  layout: {\n    title: 'Umi Max基础框架',\n  },\n  \n  // 路由配置\n  routes: routes,\n  \n  // 包管理器\n  npmClient: 'pnpm',\n});"})}),(0,f.jsx)(Z,{level:3,children:"📦 依赖管理"}),(0,f.jsxs)(j.Z,{gutter:[16,16],children:[(0,f.jsx)(a.Z,{xs:24,lg:12,children:(0,f.jsxs)(p.Z,{title:"核心依赖",size:"small",children:[(0,f.jsx)(Z,{level:5,children:"框架相关"}),(0,f.jsxs)("ul",{children:[(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"@umijs/max"})," - Umi Max 框架"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"antd"})," - Ant Design 组件库"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"@ant-design/icons"})," - 图标库"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"@ant-design/pro-components"})," - Pro 组件"]})]}),(0,f.jsx)(Z,{level:5,children:"工具库"}),(0,f.jsxs)("ul",{children:[(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"html2canvas"})," - 截图功能"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"react-syntax-highlighter"})," - 代码高亮"]})]})]})}),(0,f.jsx)(a.Z,{xs:24,lg:12,children:(0,f.jsxs)(p.Z,{title:"开发依赖",size:"small",children:[(0,f.jsx)(Z,{level:5,children:"类型定义"}),(0,f.jsxs)("ul",{children:[(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"typescript"})," - TypeScript 支持"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"@types/react"})," - React 类型"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"@types/react-dom"})," - React DOM 类型"]})]}),(0,f.jsx)(Z,{level:5,children:"代码质量工具"}),(0,f.jsxs)("ul",{children:[(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"prettier"})," - 代码格式化"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"husky"})," - Git 钩子"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{code:!0,children:"lint-staged"})," - 暂存文件检查"]})]})]})})]}),(0,f.jsx)(Z,{level:3,children:"🔧 VS Code 配置推荐"}),(0,f.jsxs)(p.Z,{style:{marginBottom:24},children:[(0,f.jsx)(Z,{level:4,children:"推荐插件"}),(0,f.jsxs)(j.Z,{gutter:[16,16],children:[(0,f.jsx)(a.Z,{xs:24,md:12,children:(0,f.jsxs)("ul",{children:[(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{strong:!0,children:"ES7+ React/Redux/React-Native snippets"})," - React 代码片段"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{strong:!0,children:"Prettier - Code formatter"})," - 代码格式化"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{strong:!0,children:"ESLint"})," - 代码检查"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{strong:!0,children:"Auto Rename Tag"})," - 标签自动重命名"]})]})}),(0,f.jsx)(a.Z,{xs:24,md:12,children:(0,f.jsxs)("ul",{children:[(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{strong:!0,children:"GitLens"})," - Git 增强"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{strong:!0,children:"Thunder Client"})," - API 测试"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{strong:!0,children:"Color Highlight"})," - 颜色高亮"]}),(0,f.jsxs)("li",{children:[(0,f.jsx)(k,{strong:!0,children:"Path Intellisense"})," - 路径智能提示"]})]})})]}),(0,f.jsx)(Z,{level:4,children:"工作区配置：.vscode/settings.json"}),(0,f.jsx)("pre",{style:{padding:16},children:'{\n  "editor.formatOnSave": true,\n  "editor.codeActionsOnSave": {\n    "source.fixAll.eslint": true,\n    "source.organizeImports": true\n  },\n  "typescript.preferences.importModuleSpecifier": "relative",\n  "emmet.includeLanguages": {\n    "javascript": "javascriptreact",\n    "typescript": "typescriptreact"\n  }\n}'})]})]})}];return(0,f.jsxs)("div",{style:{padding:"24px"},children:[(0,f.jsx)(Z,{level:1,children:"Umi Max 脚手架开发编码规范"}),(0,f.jsx)(g.Z,{message:"规范说明",description:"本规范基于 Umi Max 框架，结合 Ant Design、TypeScript、ESLint、Prettier 等工具，为团队提供统一的开发标准。",type:"info",showIcon:!0,style:{marginBottom:24}}),(0,f.jsx)(m.Z,{items:l,size:"large"}),(0,f.jsx)(y.Z,{}),(0,f.jsxs)(p.Z,{style:{marginTop:24},children:[(0,f.jsx)(Z,{level:3,children:"📚 相关资源"}),(0,f.jsxs)(j.Z,{gutter:[16,16],children:[(0,f.jsxs)(a.Z,{xs:24,md:8,children:[(0,f.jsx)(Z,{level:5,children:"官方文档"}),(0,f.jsxs)("ul",{children:[(0,f.jsx)("li",{children:(0,f.jsx)(S,{href:"https://umijs.org/",target:"_blank",children:"Umi 官方文档"})}),(0,f.jsx)("li",{children:(0,f.jsx)(S,{href:"https://ant.design/",target:"_blank",children:"Ant Design 文档"})}),(0,f.jsx)("li",{children:(0,f.jsx)(S,{href:"https://www.typescriptlang.org/",target:"_blank",children:"TypeScript 文档"})})]})]}),(0,f.jsxs)(a.Z,{xs:24,md:8,children:[(0,f.jsx)(Z,{level:5,children:"工具文档"}),(0,f.jsxs)("ul",{children:[(0,f.jsx)("li",{children:(0,f.jsx)(S,{href:"https://eslint.org/",target:"_blank",children:"ESLint 配置"})}),(0,f.jsx)("li",{children:(0,f.jsx)(S,{href:"https://prettier.io/",target:"_blank",children:"Prettier 配置"})}),(0,f.jsx)("li",{children:(0,f.jsx)(S,{href:"https://typicode.github.io/husky/",target:"_blank",children:"Husky 使用指南"})})]})]}),(0,f.jsxs)(a.Z,{xs:24,md:8,children:[(0,f.jsx)(Z,{level:5,children:"最佳实践"}),(0,f.jsxs)("ul",{children:[(0,f.jsx)("li",{children:(0,f.jsx)(S,{href:"https://react.dev/",target:"_blank",children:"React 最佳实践"})}),(0,f.jsx)("li",{children:(0,f.jsx)(S,{href:"https://github.com/airbnb/javascript",target:"_blank",children:"Airbnb JavaScript 规范"})}),(0,f.jsx)("li",{children:(0,f.jsx)(S,{href:"https://github.com/typescript-eslint/typescript-eslint",target:"_blank",children:"TypeScript ESLint"})})]})]})]})]})]})}}}]);